class Timer extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      session: 25,
      break: 5,
      timerType: 'session',
      time: {m: 25, s: '00'},
      play: false
    };
    this.resetTimer = this.resetTimer.bind(this);
    this.updateSession = this.updateSession.bind(this);
    this.updateBreak = this.updateBreak.bind(this);
    this.countDown = this.countDown.bind(this);
    this.toggleTimer = this.toggleTimer.bind(this);
  }
  
  /*componentDidMount() {
    this.timerID = setInterval(() => this.countDown(), 1000);
  }
  
  componentWillUnmount() {
    clearInterval(this.timerID);
  }*/
  
  resetTimer() {
    $('#beep')[0].pause();
    $('#beep')[0].currentTime = 0;
    this.setState({
      session: 25,
      break: 5,
      timerType: 'session',
      time: {m: 25, s: 0},
      play: false
    });
    $('#time-left').html(25 + "<span id='spanio'>:</span>" + '00');
  }
  
  updateSession(e) {
    if ((/de/).test(e.target.id)) {
      if (this.state.play == false && this.state.session > 1) {
        this.setState({
          session: this.state.session - 1
          //time: {m: this.state.session - 1, s: '00'}
        });
        if (this.state.timerType == 'session') {
          this.setState({
            time: {m: this.state.session - 1, s: '00'}
          });
          let o = this.state.session < 11 ? '0' : '';
          $('#time-left').html(o + (this.state.session - 1) + "<span id='spanio'>:</span>00");
        }
      }
    }
    else {
      if (this.state.play == false && this.state.session < 60) {
        this.setState({
          session: this.state.session + 1
          //time: {m: this.state.session + 1, s: '00'}
        });
        if (this.state.timerType == 'session') {
          this.setState({
            time: {m: this.state.session + 1, s: '00'}
          })
          let o = this.state.session < 9 ? '0' : '';
          $('#time-left').html(o + (this.state.session + 1) + "<span id='spanio'>:</span>00");
        }
      }
    }
  }
  
  updateBreak(e) {
    if ((/de/).test(e.target.id)) {
      if (this.state.play == false && this.state.break > 1) {
        this.setState({
          break: this.state.break - 1
          //time: {m: this.state.break - 1, s: '00'}
        });
        if (this.state.timerType == 'break') {
          this.setState({
            time: {m: this.state.break - 1, s: '00'}
          });
          let o = this.state.break < 11 ? '0' : '';
          $('#time-left').html(o + (this.state.break - 1) + "<span id='spanio'>:</span>00");
        }
      }
    }
    else {
      if (this.state.play == false && this.state.break < 60) {
        this.setState({
          break: this.state.break + 1
          //time: {m: this.state.break + 1, s: '00'}
        });
        if (this.state.timerType == 'break') {
          this.setState({
            time: {m: this.state.break + 1, s: '00'}
          });
          let o = this.state.break < 9 ? '0' : '';
          $('#time-left').html(o + (this.state.break + 1) + "<span id='spanio'>:</span>00");
        }
      }
    }
  }
  
  countDown() {
    if (this.state.play) {
      if (this.state.time.s > 10) {
        this.setState({
          time: {m: this.state.time.m, s: this.state.time.s - 1}
        });
      }
      else if (this.state.time.s > 0) {
        this.setState({
          time: {m: this.state.time.m, s: '0' + (this.state.time.s - 1)}
        });
      }
      else {
        if (this.state.time.m > 0)
          this.setState({
            time: {m: this.state.time.m - 1, s: 59}
          });
        else {
          document.getElementById('beep').load();
          document.getElementById('beep').play();
          this.state.timerType == 'session' ?
            this.setState({
              timerType: 'break',
              time: {m: this.state.break, s: '00'}
            })
          : this.setState({
              timerType: 'session',
              time: {m: this.state.session, s: '00'}
            });
        }
      }
      if (this.state.time.m > 9)
        $('#time-left').html(this.state.time.m + "<span id='spanio'>:</span>" + this.state.time.s);
      else
        $('#time-left').html('0' + this.state.time.m + "<span id='spanio'>:</span>" + this.state.time.s);
    }
  }
  
  toggleTimer() {
    if (this.state.play == true) {
      clearInterval(this.timerID);
    }
    else {
      this.timerID = setInterval(() => this.countDown(), 1000);
    }
    this.setState({
      play: !this.state.play
    });
    //let timerID = setInterval(() => this.countDown(), 1);
  }
  
  render () {
    return (
      <div>
        <div id='tomato'>
          <div id='bud'>
            <div class='dot' />
            <div class='dot' />
          </div>
        </div>
        <Session sessionvalue={this.state.session} />
        <div id='session-set'>
          <i id='session-decrement' onClick={this.updateSession} class="fas fa-caret-down" />
          <i id='session-increment' onClick={this.updateSession} class="fas fa-caret-up" />
        </div>
        <Break breakvalue={this.state.break} />
        <div id='break-set'>
          <i id='break-decrement' onClick={this.updateBreak} class="fas fa-caret-down" />
          <i id='break-increment' onClick={this.updateBreak} class="fas fa-caret-up" />
        </div>
        <div id='timer'>
          <div id='timer-label'>{this.state.timerType}</div>
          <div id='time-left'>{this.state.time.m}<span id='spanio'>:</span>{this.state.time.s}</div>
        </div>
        <div id='start_stop' onClick={this.toggleTimer}>
          <i class="fas fa-play" /><i class="fas fa-pause" />
        </div>
        <div id='reset' onClick={this.resetTimer}>
          <i class="fas fa-redo"></i>
        </div>
        <audio id='beep' src="https://onlineclock.net/audio/options/default.mp3" />
      </div>
    );
  }
}

const Session = (props) => {
  return (
    <div id='session'>
      <div id='session-label'>
        Session Length
      </div>
      <div id='session-length'>
        {props.sessionvalue}
      </div>
    </div>
  );
}

const Break = (props) => {
  return (
    <div id='break'>
      <div id='break-label'>
        Break Length
      </div>
      <div id='break-length'>
        {props.breakvalue}
      </div>
    </div>
  );
}

ReactDOM.render(<Timer />, document.getElementById('item'));